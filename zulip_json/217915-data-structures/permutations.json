[
    {
        "content": "<p>Here's a little programming puzzle.  Given a permutation of the first N integers, find the moves needed to put the list back in place.</p>",
        "id": 186227741,
        "sender_full_name": "Steve Howell",
        "timestamp": 1579641046
    },
    {
        "content": "<p>So for the list [0, 5, 1, 2, 3, 4], the only move you need is <strong>from</strong>: 1, <strong>to</strong>: 5.  In other words, put the 5 from position 1 into position 5.</p>",
        "id": 186227840,
        "sender_full_name": "Steve Howell",
        "timestamp": 1579641105
    },
    {
        "content": "<p>For lists that are in worse order, you'll require more moves, so, for example, [3, 2, 1, 0] requires moves from-0-to-3 and from-1-to-2.</p>",
        "id": 186228130,
        "sender_full_name": "Steve Howell",
        "timestamp": 1579641186
    },
    {
        "content": "<p>Finally, your moves should account for previous moves, so for [3, 2, 1, 0], you might move the 0 to the front of the list, and of course that will change the positions of [2, 1, 0] and affect their subsequent from/to offsets.</p>",
        "id": 186228323,
        "sender_full_name": "Steve Howell",
        "timestamp": 1579641284
    },
    {
        "content": "<p>The simple solution to this problem is to just take any decent sort algorithm, perform it on the list, and record the moves.</p>",
        "id": 186228410,
        "sender_full_name": "Steve Howell",
        "timestamp": 1579641323
    },
    {
        "content": "<p>But suppose you think that the list is generally gonna be mostly sorted.  How can you take advantage of that?   And when do you bail out of the sort?</p>",
        "id": 186228446,
        "sender_full_name": "Steve Howell",
        "timestamp": 1579641356
    },
    {
        "content": "<p>So sorry to mention @all for the above puzzle, but I'm trying to generate a bit of conversation on this site.  Thanks again for signing up!</p>",
        "id": 186228525,
        "sender_full_name": "Steve Howell",
        "timestamp": 1579641390
    },
    {
        "content": "<p>What are you defining as a \"move\"? Saying that you can solve <code>[0, 5, 1, 2, 3, 4]</code> in one move seems to imply that a \"move\" is a single-step rotation of some contiguous subsequence, but you need at least three moves to solve <code>[3, 2, 1, 0]</code> that way.</p>",
        "id": 186232415,
        "sender_full_name": "Ray Kraesig",
        "timestamp": 1579643840
    },
    {
        "content": "<p>A move from 2 to 6 moves item 2 to the 6th position and pushes 3, 4, 5, 6 back.  (So, yeah, kinda like a rotation.)</p>",
        "id": 186232571,
        "sender_full_name": "Steve Howell",
        "timestamp": 1579643939
    },
    {
        "content": "<p>Oops, you're right about 3,2,1,0.</p>",
        "id": 186232636,
        "sender_full_name": "Steve Howell",
        "timestamp": 1579643991
    },
    {
        "content": "<p>One solution for 3210 is 3210 -&gt; 0321 -&gt; 0132 -&gt; 0123.</p>",
        "id": 186232741,
        "sender_full_name": "Steve Howell",
        "timestamp": 1579644033
    },
    {
        "content": "<p>Also, I'm making the constraint that you can only move one element at a time.  In other words, you can't move a big chunk at a time.</p>",
        "id": 186232921,
        "sender_full_name": "Steve Howell",
        "timestamp": 1579644176
    },
    {
        "content": "<p>So one fairly obvious thing to do with a mostly sorted list is compress it into ranges...i.e. [9, 0, 1, 2, 3, 6, 7, 4, 5, 8] would be [9, 0-3, 6-7, 4-5, 8].</p>",
        "id": 186233155,
        "sender_full_name": "Steve Howell",
        "timestamp": 1579644346
    },
    {
        "content": "<p>And then if you do an insertion sort, you can pretty quickly infer the actual moves from the original list.</p>",
        "id": 186233324,
        "sender_full_name": "Steve Howell",
        "timestamp": 1579644460
    },
    {
        "content": "<p>But you need to be a little careful about whether you move 0, 1, 2, and 3 before 9 (four moves) vs. moving 9 before 0, 1, 2, and 3 (one move).  And then there's also the fact that you're not really minimizing moves in an insertion sort.</p>",
        "id": 186233501,
        "sender_full_name": "Steve Howell",
        "timestamp": 1579644566
    },
    {
        "content": "<p>Or once you got the ranges, you could do an efficient sort to know where the ranges belong:</p>\n<ul>\n<li>9 (5th)</li>\n<li>0-3 (1st)</li>\n<li>6-7 (3rd)</li>\n<li>4-5 (2nd)</li>\n<li>8 (4th)</li>\n</ul>\n<p>And then knowing that, the question is still how to minimize moves.</p>",
        "id": 186233897,
        "sender_full_name": "Steve Howell",
        "timestamp": 1579644826
    },
    {
        "content": "<p>In the above example, you'd probably demote 9 to the bottom, then demote 6 and 7, and then you're done.</p>",
        "id": 186234019,
        "sender_full_name": "Steve Howell",
        "timestamp": 1579644903
    },
    {
        "content": "<p>That's interesting. We can reword the new problem as:</p>\n<p>\"You have heavy bags of flour each having some weight and you know the order that you have to put them in. You want to expend minimum energy to pick up the bags (thus, you wanna lift the lighter bags). Which bags would you move around?\"</p>\n<p>Here, this becomes:</p>\n<table>\n<thead>\n<tr>\n<th>Current Order</th>\n<th>Weight</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>4</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>",
        "id": 186267443,
        "sender_full_name": "Rohitt Vashishtha",
        "timestamp": 1579684190
    }
]